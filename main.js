/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n,i,s,r,o,a={579:(e,t,n)=>{"use strict";n(177),n(562)},562:(e,t,n)=>{const i=n(138),s=document.querySelector("#target"),r=new i.Collapse(s,{toggle:!1});document.querySelector("#btn-target").addEventListener("click",(e=>{e.preventDefault(),r.toggle()}))},138:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Alert:()=>xt,Button:()=>Dt,Carousel:()=>cn,Collapse:()=>An,Dropdown:()=>Qn,Modal:()=>Di,Offcanvas:()=>Ki,Popover:()=>gs,ScrollSpy:()=>xs,Tab:()=>Ks,Toast:()=>lr,Tooltip:()=>fs});var i={};n.r(i),n.d(i,{afterMain:()=>A,afterRead:()=>y,afterWrite:()=>O,applyStyles:()=>$,arrow:()=>Z,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>v,beforeWrite:()=>C,bottom:()=>r,clippingParents:()=>h,computeStyles:()=>ie,createPopper:()=>Se,createPopperBase:()=>Ie,createPopperLite:()=>$e,detectOverflow:()=>ve,end:()=>u,eventListeners:()=>re,flip:()=>be,hide:()=>Ee,left:()=>a,main:()=>E,modifierPhases:()=>x,offset:()=>Ae,placements:()=>_,popper:()=>p,popperGenerator:()=>Le,popperOffsets:()=>Ce,preventOverflow:()=>Te,read:()=>b,reference:()=>m,right:()=>o,start:()=>d,top:()=>s,variationPlacements:()=>g,viewport:()=>f,write:()=>T});var s="top",r="bottom",o="right",a="left",l="auto",c=[s,r,o,a],d="start",u="end",h="clippingParents",f="viewport",p="popper",m="reference",g=c.reduce((function(e,t){return e.concat([t+"-"+d,t+"-"+u])}),[]),_=[].concat(c,[l]).reduce((function(e,t){return e.concat([t,t+"-"+d,t+"-"+u])}),[]),v="beforeRead",b="read",y="afterRead",w="beforeMain",E="main",A="afterMain",C="beforeWrite",T="write",O="afterWrite",x=[v,b,y,w,E,A,C,T,O];function k(e){return e?(e.nodeName||"").toLowerCase():null}function D(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function L(e){return e instanceof D(e).Element||e instanceof Element}function I(e){return e instanceof D(e).HTMLElement||e instanceof HTMLElement}function S(e){return"undefined"!=typeof ShadowRoot&&(e instanceof D(e).ShadowRoot||e instanceof ShadowRoot)}const $={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},s=t.elements[e];I(s)&&k(s)&&(Object.assign(s.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],s=t.attributes[e]||{},r=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});I(i)&&k(i)&&(Object.assign(i.style,r),Object.keys(s).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function N(e){return e.split("-")[0]}var j=Math.max,P=Math.min,M=Math.round;function H(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function q(){return!/^((?!chrome|android).)*safari/i.test(H())}function B(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var i=e.getBoundingClientRect(),s=1,r=1;t&&I(e)&&(s=e.offsetWidth>0&&M(i.width)/e.offsetWidth||1,r=e.offsetHeight>0&&M(i.height)/e.offsetHeight||1);var o=(L(e)?D(e):window).visualViewport,a=!q()&&n,l=(i.left+(a&&o?o.offsetLeft:0))/s,c=(i.top+(a&&o?o.offsetTop:0))/r,d=i.width/s,u=i.height/r;return{width:d,height:u,top:c,right:l+d,bottom:c+u,left:l,x:l,y:c}}function F(e){var t=B(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function W(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&S(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function R(e){return D(e).getComputedStyle(e)}function z(e){return["table","td","th"].indexOf(k(e))>=0}function V(e){return((L(e)?e.ownerDocument:e.document)||window.document).documentElement}function U(e){return"html"===k(e)?e:e.assignedSlot||e.parentNode||(S(e)?e.host:null)||V(e)}function K(e){return I(e)&&"fixed"!==R(e).position?e.offsetParent:null}function Q(e){for(var t=D(e),n=K(e);n&&z(n)&&"static"===R(n).position;)n=K(n);return n&&("html"===k(n)||"body"===k(n)&&"static"===R(n).position)?t:n||function(e){var t=/firefox/i.test(H());if(/Trident/i.test(H())&&I(e)&&"fixed"===R(e).position)return null;var n=U(e);for(S(n)&&(n=n.host);I(n)&&["html","body"].indexOf(k(n))<0;){var i=R(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function X(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Y(e,t,n){return j(e,P(t,n))}function G(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function J(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const Z={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,l=e.options,d=n.elements.arrow,u=n.modifiersData.popperOffsets,h=N(n.placement),f=X(h),p=[a,o].indexOf(h)>=0?"height":"width";if(d&&u){var m=function(e,t){return G("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:J(e,c))}(l.padding,n),g=F(d),_="y"===f?s:a,v="y"===f?r:o,b=n.rects.reference[p]+n.rects.reference[f]-u[f]-n.rects.popper[p],y=u[f]-n.rects.reference[f],w=Q(d),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=b/2-y/2,C=m[_],T=E-g[p]-m[v],O=E/2-g[p]/2+A,x=Y(C,O,T),k=f;n.modifiersData[i]=((t={})[k]=x,t.centerOffset=x-O,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&W(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ee(e){return e.split("-")[1]}var te={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ne(e){var t,n=e.popper,i=e.popperRect,l=e.placement,c=e.variation,d=e.offsets,h=e.position,f=e.gpuAcceleration,p=e.adaptive,m=e.roundOffsets,g=e.isFixed,_=d.x,v=void 0===_?0:_,b=d.y,y=void 0===b?0:b,w="function"==typeof m?m({x:v,y}):{x:v,y};v=w.x,y=w.y;var E=d.hasOwnProperty("x"),A=d.hasOwnProperty("y"),C=a,T=s,O=window;if(p){var x=Q(n),k="clientHeight",L="clientWidth";x===D(n)&&"static"!==R(x=V(n)).position&&"absolute"===h&&(k="scrollHeight",L="scrollWidth"),(l===s||(l===a||l===o)&&c===u)&&(T=r,y-=(g&&x===O&&O.visualViewport?O.visualViewport.height:x[k])-i.height,y*=f?1:-1),l!==a&&(l!==s&&l!==r||c!==u)||(C=o,v-=(g&&x===O&&O.visualViewport?O.visualViewport.width:x[L])-i.width,v*=f?1:-1)}var I,S=Object.assign({position:h},p&&te),$=!0===m?function(e,t){var n=e.x,i=e.y,s=t.devicePixelRatio||1;return{x:M(n*s)/s||0,y:M(i*s)/s||0}}({x:v,y},D(n)):{x:v,y};return v=$.x,y=$.y,f?Object.assign({},S,((I={})[T]=A?"0":"",I[C]=E?"0":"",I.transform=(O.devicePixelRatio||1)<=1?"translate("+v+"px, "+y+"px)":"translate3d("+v+"px, "+y+"px, 0)",I)):Object.assign({},S,((t={})[T]=A?y+"px":"",t[C]=E?v+"px":"",t.transform="",t))}const ie={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,s=void 0===i||i,r=n.adaptive,o=void 0===r||r,a=n.roundOffsets,l=void 0===a||a,c={placement:N(t.placement),variation:ee(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ne(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ne(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var se={passive:!0};const re={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,s=i.scroll,r=void 0===s||s,o=i.resize,a=void 0===o||o,l=D(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return r&&c.forEach((function(e){e.addEventListener("scroll",n.update,se)})),a&&l.addEventListener("resize",n.update,se),function(){r&&c.forEach((function(e){e.removeEventListener("scroll",n.update,se)})),a&&l.removeEventListener("resize",n.update,se)}},data:{}};var oe={left:"right",right:"left",bottom:"top",top:"bottom"};function ae(e){return e.replace(/left|right|bottom|top/g,(function(e){return oe[e]}))}var le={start:"end",end:"start"};function ce(e){return e.replace(/start|end/g,(function(e){return le[e]}))}function de(e){var t=D(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ue(e){return B(V(e)).left+de(e).scrollLeft}function he(e){var t=R(e),n=t.overflow,i=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+i)}function fe(e){return["html","body","#document"].indexOf(k(e))>=0?e.ownerDocument.body:I(e)&&he(e)?e:fe(U(e))}function pe(e,t){var n;void 0===t&&(t=[]);var i=fe(e),s=i===(null==(n=e.ownerDocument)?void 0:n.body),r=D(i),o=s?[r].concat(r.visualViewport||[],he(i)?i:[]):i,a=t.concat(o);return s?a:a.concat(pe(U(o)))}function me(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ge(e,t,n){return t===f?me(function(e,t){var n=D(e),i=V(e),s=n.visualViewport,r=i.clientWidth,o=i.clientHeight,a=0,l=0;if(s){r=s.width,o=s.height;var c=q();(c||!c&&"fixed"===t)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:r,height:o,x:a+ue(e),y:l}}(e,n)):L(t)?function(e,t){var n=B(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):me(function(e){var t,n=V(e),i=de(e),s=null==(t=e.ownerDocument)?void 0:t.body,r=j(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),o=j(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+ue(e),l=-i.scrollTop;return"rtl"===R(s||n).direction&&(a+=j(n.clientWidth,s?s.clientWidth:0)-r),{width:r,height:o,x:a,y:l}}(V(e)))}function _e(e){var t,n=e.reference,i=e.element,l=e.placement,c=l?N(l):null,h=l?ee(l):null,f=n.x+n.width/2-i.width/2,p=n.y+n.height/2-i.height/2;switch(c){case s:t={x:f,y:n.y-i.height};break;case r:t={x:f,y:n.y+n.height};break;case o:t={x:n.x+n.width,y:p};break;case a:t={x:n.x-i.width,y:p};break;default:t={x:n.x,y:n.y}}var m=c?X(c):null;if(null!=m){var g="y"===m?"height":"width";switch(h){case d:t[m]=t[m]-(n[g]/2-i[g]/2);break;case u:t[m]=t[m]+(n[g]/2-i[g]/2)}}return t}function ve(e,t){void 0===t&&(t={});var n=t,i=n.placement,a=void 0===i?e.placement:i,l=n.strategy,d=void 0===l?e.strategy:l,u=n.boundary,g=void 0===u?h:u,_=n.rootBoundary,v=void 0===_?f:_,b=n.elementContext,y=void 0===b?p:b,w=n.altBoundary,E=void 0!==w&&w,A=n.padding,C=void 0===A?0:A,T=G("number"!=typeof C?C:J(C,c)),O=y===p?m:p,x=e.rects.popper,D=e.elements[E?O:y],S=function(e,t,n,i){var s="clippingParents"===t?function(e){var t=pe(U(e)),n=["absolute","fixed"].indexOf(R(e).position)>=0&&I(e)?Q(e):e;return L(n)?t.filter((function(e){return L(e)&&W(e,n)&&"body"!==k(e)})):[]}(e):[].concat(t),r=[].concat(s,[n]),o=r[0],a=r.reduce((function(t,n){var s=ge(e,n,i);return t.top=j(s.top,t.top),t.right=P(s.right,t.right),t.bottom=P(s.bottom,t.bottom),t.left=j(s.left,t.left),t}),ge(e,o,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(L(D)?D:D.contextElement||V(e.elements.popper),g,v,d),$=B(e.elements.reference),N=_e({reference:$,element:x,strategy:"absolute",placement:a}),M=me(Object.assign({},x,N)),H=y===p?M:$,q={top:S.top-H.top+T.top,bottom:H.bottom-S.bottom+T.bottom,left:S.left-H.left+T.left,right:H.right-S.right+T.right},F=e.modifiersData.offset;if(y===p&&F){var z=F[a];Object.keys(q).forEach((function(e){var t=[o,r].indexOf(e)>=0?1:-1,n=[s,r].indexOf(e)>=0?"y":"x";q[e]+=z[n]*t}))}return q}const be={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var u=n.mainAxis,h=void 0===u||u,f=n.altAxis,p=void 0===f||f,m=n.fallbackPlacements,v=n.padding,b=n.boundary,y=n.rootBoundary,w=n.altBoundary,E=n.flipVariations,A=void 0===E||E,C=n.allowedAutoPlacements,T=t.options.placement,O=N(T),x=m||(O!==T&&A?function(e){if(N(e)===l)return[];var t=ae(e);return[ce(e),t,ce(t)]}(T):[ae(T)]),k=[T].concat(x).reduce((function(e,n){return e.concat(N(n)===l?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,s=n.boundary,r=n.rootBoundary,o=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,d=void 0===l?_:l,u=ee(i),h=u?a?g:g.filter((function(e){return ee(e)===u})):c,f=h.filter((function(e){return d.indexOf(e)>=0}));0===f.length&&(f=h);var p=f.reduce((function(t,n){return t[n]=ve(e,{placement:n,boundary:s,rootBoundary:r,padding:o})[N(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:n,boundary:b,rootBoundary:y,padding:v,flipVariations:A,allowedAutoPlacements:C}):n)}),[]),D=t.rects.reference,L=t.rects.popper,I=new Map,S=!0,$=k[0],j=0;j<k.length;j++){var P=k[j],M=N(P),H=ee(P)===d,q=[s,r].indexOf(M)>=0,B=q?"width":"height",F=ve(t,{placement:P,boundary:b,rootBoundary:y,altBoundary:w,padding:v}),W=q?H?o:a:H?r:s;D[B]>L[B]&&(W=ae(W));var R=ae(W),z=[];if(h&&z.push(F[M]<=0),p&&z.push(F[W]<=0,F[R]<=0),z.every((function(e){return e}))){$=P,S=!1;break}I.set(P,z)}if(S)for(var V=function(e){var t=k.find((function(t){var n=I.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return $=t,"break"},U=A?3:1;U>0&&"break"!==V(U);U--);t.placement!==$&&(t.modifiersData[i]._skip=!0,t.placement=$,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ye(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function we(e){return[s,o,r,a].some((function(t){return e[t]>=0}))}const Ee={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,s=t.rects.popper,r=t.modifiersData.preventOverflow,o=ve(t,{elementContext:"reference"}),a=ve(t,{altBoundary:!0}),l=ye(o,i),c=ye(a,s,r),d=we(l),u=we(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},Ae={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,l=void 0===r?[0,0]:r,c=_.reduce((function(e,n){return e[n]=function(e,t,n){var i=N(e),r=[a,s].indexOf(i)>=0?-1:1,l="function"==typeof n?n(Object.assign({},t,{placement:e})):n,c=l[0],d=l[1];return c=c||0,d=(d||0)*r,[a,o].indexOf(i)>=0?{x:d,y:c}:{x:c,y:d}}(n,t.rects,l),e}),{}),d=c[t.placement],u=d.x,h=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=h),t.modifiersData[i]=c}},Ce={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=_e({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Te={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,l=n.mainAxis,c=void 0===l||l,u=n.altAxis,h=void 0!==u&&u,f=n.boundary,p=n.rootBoundary,m=n.altBoundary,g=n.padding,_=n.tether,v=void 0===_||_,b=n.tetherOffset,y=void 0===b?0:b,w=ve(t,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=N(t.placement),A=ee(t.placement),C=!A,T=X(E),O="x"===T?"y":"x",x=t.modifiersData.popperOffsets,k=t.rects.reference,D=t.rects.popper,L="function"==typeof y?y(Object.assign({},t.rects,{placement:t.placement})):y,I="number"==typeof L?{mainAxis:L,altAxis:L}:Object.assign({mainAxis:0,altAxis:0},L),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,$={x:0,y:0};if(x){if(c){var M,H="y"===T?s:a,q="y"===T?r:o,B="y"===T?"height":"width",W=x[T],R=W+w[H],z=W-w[q],V=v?-D[B]/2:0,U=A===d?k[B]:D[B],K=A===d?-D[B]:-k[B],G=t.elements.arrow,J=v&&G?F(G):{width:0,height:0},Z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=Z[H],ne=Z[q],ie=Y(0,k[B],J[B]),se=C?k[B]/2-V-ie-te-I.mainAxis:U-ie-te-I.mainAxis,re=C?-k[B]/2+V+ie+ne+I.mainAxis:K+ie+ne+I.mainAxis,oe=t.elements.arrow&&Q(t.elements.arrow),ae=oe?"y"===T?oe.clientTop||0:oe.clientLeft||0:0,le=null!=(M=null==S?void 0:S[T])?M:0,ce=W+re-le,de=Y(v?P(R,W+se-le-ae):R,W,v?j(z,ce):z);x[T]=de,$[T]=de-W}if(h){var ue,he="x"===T?s:a,fe="x"===T?r:o,pe=x[O],me="y"===O?"height":"width",ge=pe+w[he],_e=pe-w[fe],be=-1!==[s,a].indexOf(E),ye=null!=(ue=null==S?void 0:S[O])?ue:0,we=be?ge:pe-k[me]-D[me]-ye+I.altAxis,Ee=be?pe+k[me]+D[me]-ye-I.altAxis:_e,Ae=v&&be?function(e,t,n){var i=Y(e,t,n);return i>n?n:i}(we,pe,Ee):Y(v?we:ge,pe,v?Ee:_e);x[O]=Ae,$[O]=Ae-pe}t.modifiersData[i]=$}},requiresIfExists:["offset"]};function Oe(e,t,n){void 0===n&&(n=!1);var i,s,r=I(t),o=I(t)&&function(e){var t=e.getBoundingClientRect(),n=M(t.width)/e.offsetWidth||1,i=M(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=V(t),l=B(e,o,n),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(r||!r&&!n)&&(("body"!==k(t)||he(a))&&(c=(i=t)!==D(i)&&I(i)?{scrollLeft:(s=i).scrollLeft,scrollTop:s.scrollTop}:de(i)),I(t)?((d=B(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):a&&(d.x=ue(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function xe(e){var t=new Map,n=new Set,i=[];function s(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&s(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||s(e)})),i}var ke={placement:"bottom",modifiers:[],strategy:"absolute"};function De(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Le(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,s=t.defaultOptions,r=void 0===s?ke:s;return function(e,t,n){void 0===n&&(n=r);var s,o,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},ke,r),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(n){var s="function"==typeof n?n(a.options):n;u(),a.options=Object.assign({},r,a.options,s),a.scrollParents={reference:L(e)?pe(e):e.contextElement?pe(e.contextElement):[],popper:pe(t)};var o,c,h=function(e){var t=xe(e);return x.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((o=[].concat(i,a.options.modifiers),c=o.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,s=e.effect;if("function"==typeof s){var r=s({state:a,name:t,instance:d,options:i});l.push(r||function(){})}})),d.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,n=e.popper;if(De(t,n)){a.rects={reference:Oe(t,Q(n),"fixed"===a.options.strategy),popper:F(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var s=a.orderedModifiers[i],r=s.fn,o=s.options,l=void 0===o?{}:o,u=s.name;"function"==typeof r&&(a=r({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(e){d.forceUpdate(),e(a)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(s())}))}))),o}),destroy:function(){u(),c=!0}};if(!De(e,t))return d;function u(){l.forEach((function(e){return e()})),l=[]}return d.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),d}}var Ie=Le(),Se=Le({defaultModifiers:[re,Ce,ie,$,Ae,be,Te,Z,Ee]}),$e=Le({defaultModifiers:[re,Ce,ie,$]});const Ne="transitionend",je=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t},Pe=e=>{const t=je(e);return t&&document.querySelector(t)?t:null},Me=e=>{const t=je(e);return t?document.querySelector(t):null},He=e=>{e.dispatchEvent(new Event(Ne))},qe=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),Be=e=>qe(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,Fe=e=>{if(!qe(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},We=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Re=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Re(e.parentNode):null},ze=()=>{},Ve=e=>{e.offsetHeight},Ue=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Ke=[],Qe=()=>"rtl"===document.documentElement.dir,Xe=e=>{var t;t=()=>{const t=Ue();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(Ke.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of Ke)e()})),Ke.push(t)):t()},Ye=e=>{"function"==typeof e&&e()},Ge=(e,t,n=!0)=>{if(!n)return void Ye(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),s=Number.parseFloat(n);return i||s?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let s=!1;const r=({target:n})=>{n===t&&(s=!0,t.removeEventListener(Ne,r),Ye(e))};t.addEventListener(Ne,r),setTimeout((()=>{s||He(t)}),i)},Je=(e,t,n,i)=>{const s=e.length;let r=e.indexOf(t);return-1===r?!n&&i?e[s-1]:e[0]:(r+=n?1:-1,i&&(r=(r+s)%s),e[Math.max(0,Math.min(r,s-1))])},Ze=/[^.]*(?=\..*)\.|.*/,et=/\..*/,tt=/::\d+$/,nt={};let it=1;const st={mouseenter:"mouseover",mouseleave:"mouseout"},rt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ot(e,t){return t&&`${t}::${it++}`||e.uidEvent||it++}function at(e){const t=ot(e);return e.uidEvent=t,nt[t]=nt[t]||{},nt[t]}function lt(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function ct(e,t,n){const i="string"==typeof t,s=i?n:t||n;let r=ft(e);return rt.has(r)||(r=e),[i,s,r]}function dt(e,t,n,i,s){if("string"!=typeof t||!e)return;let[r,o,a]=ct(t,n,i);if(t in st){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};o=e(o)}const l=at(e),c=l[a]||(l[a]={}),d=lt(c,o,r?n:null);if(d)return void(d.oneOff=d.oneOff&&s);const u=ot(o,t.replace(Ze,"")),h=r?function(e,t,n){return function i(s){const r=e.querySelectorAll(t);for(let{target:o}=s;o&&o!==this;o=o.parentNode)for(const a of r)if(a===o)return mt(s,{delegateTarget:o}),i.oneOff&&pt.off(e,s.type,t,n),n.apply(o,[s])}}(e,n,o):function(e,t){return function n(i){return mt(i,{delegateTarget:e}),n.oneOff&&pt.off(e,i.type,t),t.apply(e,[i])}}(e,o);h.delegationSelector=r?n:null,h.callable=o,h.oneOff=s,h.uidEvent=u,c[u]=h,e.addEventListener(a,h,r)}function ut(e,t,n,i,s){const r=lt(t[n],i,s);r&&(e.removeEventListener(n,r,Boolean(s)),delete t[n][r.uidEvent])}function ht(e,t,n,i){const s=t[n]||{};for(const r of Object.keys(s))if(r.includes(i)){const i=s[r];ut(e,t,n,i.callable,i.delegationSelector)}}function ft(e){return e=e.replace(et,""),st[e]||e}const pt={on(e,t,n,i){dt(e,t,n,i,!1)},one(e,t,n,i){dt(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[s,r,o]=ct(t,n,i),a=o!==t,l=at(e),c=l[o]||{},d=t.startsWith(".");if(void 0===r){if(d)for(const n of Object.keys(l))ht(e,l,n,t.slice(1));for(const n of Object.keys(c)){const i=n.replace(tt,"");if(!a||t.includes(i)){const t=c[n];ut(e,l,o,t.callable,t.delegationSelector)}}}else{if(!Object.keys(c).length)return;ut(e,l,o,r,s?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=Ue();let s=null,r=!0,o=!0,a=!1;t!==ft(t)&&i&&(s=i.Event(t,n),i(e).trigger(s),r=!s.isPropagationStopped(),o=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());let l=new Event(t,{bubbles:r,cancelable:!0});return l=mt(l,n),a&&l.preventDefault(),o&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function mt(e,t){for(const[n,i]of Object.entries(t||{}))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}const gt=new Map,_t={set(e,t,n){gt.has(e)||gt.set(e,new Map);const i=gt.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>gt.has(e)&&gt.get(e).get(t)||null,remove(e,t){if(!gt.has(e))return;const n=gt.get(e);n.delete(t),0===n.size&&gt.delete(e)}};function vt(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function bt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const yt={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${bt(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${bt(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=vt(e.dataset[i])}return t},getDataAttribute:(e,t)=>vt(e.getAttribute(`data-bs-${bt(t)}`))};class wt{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=qe(t)?yt.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...qe(t)?yt.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const i of Object.keys(t)){const s=t[i],r=e[i],o=qe(r)?"element":null==(n=r)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${s}".`)}var n}}class Et extends wt{constructor(e,t){super(),(e=Be(e))&&(this._element=e,this._config=this._getConfig(t),_t.set(this._element,this.constructor.DATA_KEY,this))}dispose(){_t.remove(this._element,this.constructor.DATA_KEY),pt.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){Ge(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return _t.get(Be(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const At=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;pt.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),We(this))return;const s=Me(this)||this.closest(`.${i}`);e.getOrCreateInstance(s)[t]()}))},Ct=".bs.alert",Tt=`close${Ct}`,Ot=`closed${Ct}`;class xt extends Et{static get NAME(){return"alert"}close(){if(pt.trigger(this._element,Tt).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),pt.trigger(this._element,Ot),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=xt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}At(xt,"close"),Xe(xt);const kt='[data-bs-toggle="button"]';class Dt extends Et{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=Dt.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}pt.on(document,"click.bs.button.data-api",kt,(e=>{e.preventDefault();const t=e.target.closest(kt);Dt.getOrCreateInstance(t).toggle()})),Xe(Dt);const Lt={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!We(e)&&Fe(e)))}},It=".bs.swipe",St=`touchstart${It}`,$t=`touchmove${It}`,Nt=`touchend${It}`,jt=`pointerdown${It}`,Pt=`pointerup${It}`,Mt={endCallback:null,leftCallback:null,rightCallback:null},Ht={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class qt extends wt{constructor(e,t){super(),this._element=e,e&&qt.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Mt}static get DefaultType(){return Ht}static get NAME(){return"swipe"}dispose(){pt.off(this._element,It)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),Ye(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&Ye(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(pt.on(this._element,jt,(e=>this._start(e))),pt.on(this._element,Pt,(e=>this._end(e))),this._element.classList.add("pointer-event")):(pt.on(this._element,St,(e=>this._start(e))),pt.on(this._element,$t,(e=>this._move(e))),pt.on(this._element,Nt,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Bt=".bs.carousel",Ft=".data-api",Wt="next",Rt="prev",zt="left",Vt="right",Ut=`slide${Bt}`,Kt=`slid${Bt}`,Qt=`keydown${Bt}`,Xt=`mouseenter${Bt}`,Yt=`mouseleave${Bt}`,Gt=`dragstart${Bt}`,Jt=`load${Bt}${Ft}`,Zt=`click${Bt}${Ft}`,en="carousel",tn="active",nn=".active",sn=".carousel-item",rn=nn+sn,on={ArrowLeft:Vt,ArrowRight:zt},an={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},ln={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class cn extends Et{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Lt.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===en&&this.cycle()}static get Default(){return an}static get DefaultType(){return ln}static get NAME(){return"carousel"}next(){this._slide(Wt)}nextWhenVisible(){!document.hidden&&Fe(this._element)&&this.next()}prev(){this._slide(Rt)}pause(){this._isSliding&&He(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?pt.one(this._element,Kt,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void pt.one(this._element,Kt,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?Wt:Rt;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&pt.on(this._element,Qt,(e=>this._keydown(e))),"hover"===this._config.pause&&(pt.on(this._element,Xt,(()=>this.pause())),pt.on(this._element,Yt,(()=>this._maybeEnableCycle()))),this._config.touch&&qt.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Lt.find(".carousel-item img",this._element))pt.on(e,Gt,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(zt)),rightCallback:()=>this._slide(this._directionToOrder(Vt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new qt(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=on[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Lt.findOne(nn,this._indicatorsElement);t.classList.remove(tn),t.removeAttribute("aria-current");const n=Lt.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(tn),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===Wt,s=t||Je(this._getItems(),n,i,this._config.wrap);if(s===n)return;const r=this._getItemIndex(s),o=t=>pt.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:r});if(o(Ut).defaultPrevented)return;if(!n||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(r),this._activeElement=s;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";s.classList.add(c),Ve(s),n.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(tn),n.classList.remove(tn,c,l),this._isSliding=!1,o(Kt)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Lt.findOne(rn,this._element)}_getItems(){return Lt.find(sn,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return Qe()?e===zt?Rt:Wt:e===zt?Wt:Rt}_orderToDirection(e){return Qe()?e===Rt?zt:Vt:e===Rt?Vt:zt}static jQueryInterface(e){return this.each((function(){const t=cn.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}pt.on(document,Zt,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Me(this);if(!t||!t.classList.contains(en))return;e.preventDefault();const n=cn.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===yt.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),pt.on(window,Jt,(()=>{const e=Lt.find('[data-bs-ride="carousel"]');for(const t of e)cn.getOrCreateInstance(t)})),Xe(cn);const dn=".bs.collapse",un=`show${dn}`,hn=`shown${dn}`,fn=`hide${dn}`,pn=`hidden${dn}`,mn=`click${dn}.data-api`,gn="show",_n="collapse",vn="collapsing",bn=`:scope .${_n} .${_n}`,yn='[data-bs-toggle="collapse"]',wn={parent:null,toggle:!0},En={parent:"(null|element)",toggle:"boolean"};class An extends Et{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=Lt.find(yn);for(const e of n){const t=Pe(e),n=Lt.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return wn}static get DefaultType(){return En}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>An.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(pt.trigger(this._element,un).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(_n),this._element.classList.add(vn),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(vn),this._element.classList.add(_n,gn),this._element.style[t]="",pt.trigger(this._element,hn)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(pt.trigger(this._element,fn).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,Ve(this._element),this._element.classList.add(vn),this._element.classList.remove(_n,gn);for(const e of this._triggerArray){const t=Me(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(vn),this._element.classList.add(_n),pt.trigger(this._element,pn)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(gn)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=Be(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(yn);for(const t of e){const e=Me(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Lt.find(bn,this._config.parent);return Lt.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=An.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}pt.on(document,mn,yn,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Pe(this),n=Lt.find(t);for(const e of n)An.getOrCreateInstance(e,{toggle:!1}).toggle()})),Xe(An);const Cn="dropdown",Tn=".bs.dropdown",On=".data-api",xn="ArrowUp",kn="ArrowDown",Dn=`hide${Tn}`,Ln=`hidden${Tn}`,In=`show${Tn}`,Sn=`shown${Tn}`,$n=`click${Tn}${On}`,Nn=`keydown${Tn}${On}`,jn=`keyup${Tn}${On}`,Pn="show",Mn='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Hn=`${Mn}.${Pn}`,qn=".dropdown-menu",Bn=Qe()?"top-end":"top-start",Fn=Qe()?"top-start":"top-end",Wn=Qe()?"bottom-end":"bottom-start",Rn=Qe()?"bottom-start":"bottom-end",zn=Qe()?"left-start":"right-start",Vn=Qe()?"right-start":"left-start",Un={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Kn={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Qn extends Et{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Lt.next(this._element,qn)[0]||Lt.prev(this._element,qn)[0]||Lt.findOne(qn,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Un}static get DefaultType(){return Kn}static get NAME(){return Cn}toggle(){return this._isShown()?this.hide():this.show()}show(){if(We(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!pt.trigger(this._element,In,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))pt.on(e,"mouseover",ze);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Pn),this._element.classList.add(Pn),pt.trigger(this._element,Sn,e)}}hide(){if(We(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!pt.trigger(this._element,Dn,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))pt.off(e,"mouseover",ze);this._popper&&this._popper.destroy(),this._menu.classList.remove(Pn),this._element.classList.remove(Pn),this._element.setAttribute("aria-expanded","false"),yt.removeDataAttribute(this._menu,"popper"),pt.trigger(this._element,Ln,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!qe(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Cn.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:qe(this._config.reference)?e=Be(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=Se(e,this._menu,t)}_isShown(){return this._menu.classList.contains(Pn)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return zn;if(e.classList.contains("dropstart"))return Vn;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?Fn:Bn:t?Rn:Wn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(yt.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const n=Lt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>Fe(e)));n.length&&Je(n,t,e===kn,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=Qn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Lt.find(Hn);for(const n of t){const t=Qn.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),s=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const r={relatedTarget:t._element};"click"===e.type&&(r.clickEvent=e),t._completeHide(r)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[xn,kn].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const s=this.matches(Mn)?this:Lt.prev(this,Mn)[0]||Lt.next(this,Mn)[0]||Lt.findOne(Mn,e.delegateTarget.parentNode),r=Qn.getOrCreateInstance(s);if(i)return e.stopPropagation(),r.show(),void r._selectMenuItem(e);r._isShown()&&(e.stopPropagation(),r.hide(),s.focus())}}pt.on(document,Nn,Mn,Qn.dataApiKeydownHandler),pt.on(document,Nn,qn,Qn.dataApiKeydownHandler),pt.on(document,$n,Qn.clearMenus),pt.on(document,jn,Qn.clearMenus),pt.on(document,$n,Mn,(function(e){e.preventDefault(),Qn.getOrCreateInstance(this).toggle()})),Xe(Qn);const Xn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Yn=".sticky-top",Gn="padding-right",Jn="margin-right";class Zn{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Gn,(t=>t+e)),this._setElementAttributes(Xn,Gn,(t=>t+e)),this._setElementAttributes(Yn,Jn,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Gn),this._resetElementAttributes(Xn,Gn),this._resetElementAttributes(Yn,Jn)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&yt.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=yt.getDataAttribute(e,t);null!==n?(yt.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(qe(e))t(e);else for(const n of Lt.find(e,this._element))t(n)}}const ei="backdrop",ti="show",ni=`mousedown.bs.${ei}`,ii={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},si={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class ri extends wt{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return ii}static get DefaultType(){return si}static get NAME(){return ei}show(e){if(!this._config.isVisible)return void Ye(e);this._append();const t=this._getElement();this._config.isAnimated&&Ve(t),t.classList.add(ti),this._emulateAnimation((()=>{Ye(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(ti),this._emulateAnimation((()=>{this.dispose(),Ye(e)}))):Ye(e)}dispose(){this._isAppended&&(pt.off(this._element,ni),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=Be(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),pt.on(e,ni,(()=>{Ye(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){Ge(e,this._getElement(),this._config.isAnimated)}}const oi=".bs.focustrap",ai=`focusin${oi}`,li=`keydown.tab${oi}`,ci="backward",di={autofocus:!0,trapElement:null},ui={autofocus:"boolean",trapElement:"element"};class hi extends wt{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return di}static get DefaultType(){return ui}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),pt.off(document,oi),pt.on(document,ai,(e=>this._handleFocusin(e))),pt.on(document,li,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,pt.off(document,oi))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Lt.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===ci?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?ci:"forward")}}const fi=".bs.modal",pi=`hide${fi}`,mi=`hidePrevented${fi}`,gi=`hidden${fi}`,_i=`show${fi}`,vi=`shown${fi}`,bi=`resize${fi}`,yi=`click.dismiss${fi}`,wi=`mousedown.dismiss${fi}`,Ei=`keydown.dismiss${fi}`,Ai=`click${fi}.data-api`,Ci="modal-open",Ti="show",Oi="modal-static",xi={backdrop:!0,focus:!0,keyboard:!0},ki={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Di extends Et{constructor(e,t){super(e,t),this._dialog=Lt.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Zn,this._addEventListeners()}static get Default(){return xi}static get DefaultType(){return ki}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||pt.trigger(this._element,_i,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ci),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(pt.trigger(this._element,pi).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Ti),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){for(const e of[window,this._dialog])pt.off(e,fi);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new ri({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new hi({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Lt.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),Ve(this._element),this._element.classList.add(Ti),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,pt.trigger(this._element,vi,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){pt.on(this._element,Ei,(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),pt.on(window,bi,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),pt.on(this._element,wi,(e=>{pt.one(this._element,yi,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ci),this._resetAdjustments(),this._scrollBar.reset(),pt.trigger(this._element,gi)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(pt.trigger(this._element,mi).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Oi)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Oi),this._queueCallback((()=>{this._element.classList.remove(Oi),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=Qe()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=Qe()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Di.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}pt.on(document,Ai,'[data-bs-toggle="modal"]',(function(e){const t=Me(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),pt.one(t,_i,(e=>{e.defaultPrevented||pt.one(t,gi,(()=>{Fe(this)&&this.focus()}))}));const n=Lt.findOne(".modal.show");n&&Di.getInstance(n).hide(),Di.getOrCreateInstance(t).toggle(this)})),At(Di),Xe(Di);const Li=".bs.offcanvas",Ii=".data-api",Si=`load${Li}${Ii}`,$i="show",Ni="showing",ji="hiding",Pi=".offcanvas.show",Mi=`show${Li}`,Hi=`shown${Li}`,qi=`hide${Li}`,Bi=`hidePrevented${Li}`,Fi=`hidden${Li}`,Wi=`resize${Li}`,Ri=`click${Li}${Ii}`,zi=`keydown.dismiss${Li}`,Vi={backdrop:!0,keyboard:!0,scroll:!1},Ui={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Ki extends Et{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Vi}static get DefaultType(){return Ui}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||pt.trigger(this._element,Mi,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Zn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Ni),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add($i),this._element.classList.remove(Ni),pt.trigger(this._element,Hi,{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(pt.trigger(this._element,qi).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(ji),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove($i,ji),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Zn).reset(),pt.trigger(this._element,Fi)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new ri({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():pt.trigger(this._element,Bi)}:null})}_initializeFocusTrap(){return new hi({trapElement:this._element})}_addEventListeners(){pt.on(this._element,zi,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():pt.trigger(this._element,Bi))}))}static jQueryInterface(e){return this.each((function(){const t=Ki.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}pt.on(document,Ri,'[data-bs-toggle="offcanvas"]',(function(e){const t=Me(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),We(this))return;pt.one(t,Fi,(()=>{Fe(this)&&this.focus()}));const n=Lt.findOne(Pi);n&&n!==t&&Ki.getInstance(n).hide(),Ki.getOrCreateInstance(t).toggle(this)})),pt.on(window,Si,(()=>{for(const e of Lt.find(Pi))Ki.getOrCreateInstance(e).show()})),pt.on(window,Wi,(()=>{for(const e of Lt.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&Ki.getOrCreateInstance(e).hide()})),At(Ki),Xe(Ki);const Qi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Xi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Yi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Gi=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!Qi.has(n)||Boolean(Xi.test(e.nodeValue)||Yi.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))},Ji={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Zi={allowList:Ji,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},es={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},ts={entry:"(string|element|function|null)",selector:"(string|element)"};class ns extends wt{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Zi}static get DefaultType(){return es}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},ts)}_setContent(e,t,n){const i=Lt.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?qe(t)?this._putElementInTemplate(Be(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...i.body.querySelectorAll("*"));for(const e of s){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[n]||[]);for(const t of i)Gi(t,s)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const is=new Set(["sanitize","allowList","sanitizeFn"]),ss="fade",rs="show",os=".modal",as="hide.bs.modal",ls="hover",cs="focus",ds={AUTO:"auto",TOP:"top",RIGHT:Qe()?"left":"right",BOTTOM:"bottom",LEFT:Qe()?"right":"left"},us={allowList:Ji,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},hs={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class fs extends Et{constructor(e,t){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return us}static get DefaultType(){return hs}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),pt.off(this._element.closest(os),as,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=pt.trigger(this._element,this.constructor.eventName("show")),t=(Re(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),pt.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(rs),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))pt.on(e,"mouseover",ze);this._queueCallback((()=>{pt.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!pt.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(rs),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))pt.off(e,"mouseover",ze);this._activeTrigger.click=!1,this._activeTrigger[cs]=!1,this._activeTrigger[ls]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),pt.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(ss,rs),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(ss),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new ns({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ss)}_isShown(){return this.tip&&this.tip.classList.contains(rs)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,n=ds[t.toUpperCase()];return Se(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)pt.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===ls?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===ls?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");pt.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?cs:ls]=!0,t._enter()})),pt.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?cs:ls]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},pt.on(this._element.closest(os),as,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=yt.getDataAttributes(this._element);for(const e of Object.keys(t))is.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:Be(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=fs.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Xe(fs);const ps={...fs.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},ms={...fs.DefaultType,content:"(null|string|element|function)"};class gs extends fs{static get Default(){return ps}static get DefaultType(){return ms}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=gs.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Xe(gs);const _s=".bs.scrollspy",vs=`activate${_s}`,bs=`click${_s}`,ys=`load${_s}.data-api`,ws="active",Es="[href]",As=".nav-link",Cs=`${As}, .nav-item > ${As}, .list-group-item`,Ts={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Os={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class xs extends Et{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Ts}static get DefaultType(){return Os}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=Be(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(pt.off(this._config.target,bs),pt.on(this._config.target,bs,Es,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,s=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const r of e){if(!r.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(r));continue}const e=r.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(n(r),!i)return}else s||e||n(r)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Lt.find(Es,this._config.target);for(const t of e){if(!t.hash||We(t))continue;const e=Lt.findOne(t.hash,this._element);Fe(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(ws),this._activateParents(e),pt.trigger(this._element,vs,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Lt.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(ws);else for(const t of Lt.parents(e,".nav, .list-group"))for(const e of Lt.prev(t,Cs))e.classList.add(ws)}_clearActiveClass(e){e.classList.remove(ws);const t=Lt.find(`${Es}.${ws}`,e);for(const e of t)e.classList.remove(ws)}static jQueryInterface(e){return this.each((function(){const t=xs.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(window,ys,(()=>{for(const e of Lt.find('[data-bs-spy="scroll"]'))xs.getOrCreateInstance(e)})),Xe(xs);const ks=".bs.tab",Ds=`hide${ks}`,Ls=`hidden${ks}`,Is=`show${ks}`,Ss=`shown${ks}`,$s=`click${ks}`,Ns=`keydown${ks}`,js=`load${ks}`,Ps="ArrowLeft",Ms="ArrowRight",Hs="ArrowUp",qs="ArrowDown",Bs="active",Fs="fade",Ws="show",Rs=":not(.dropdown-toggle)",zs='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Vs=`.nav-link${Rs}, .list-group-item${Rs}, [role="tab"]${Rs}, ${zs}`,Us=`.${Bs}[data-bs-toggle="tab"], .${Bs}[data-bs-toggle="pill"], .${Bs}[data-bs-toggle="list"]`;class Ks extends Et{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),pt.on(this._element,Ns,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?pt.trigger(t,Ds,{relatedTarget:e}):null;pt.trigger(e,Is,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(Bs),this._activate(Me(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),pt.trigger(e,Ss,{relatedTarget:t})):e.classList.add(Ws)}),e,e.classList.contains(Fs)))}_deactivate(e,t){e&&(e.classList.remove(Bs),e.blur(),this._deactivate(Me(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),pt.trigger(e,Ls,{relatedTarget:t})):e.classList.remove(Ws)}),e,e.classList.contains(Fs)))}_keydown(e){if(![Ps,Ms,Hs,qs].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[Ms,qs].includes(e.key),n=Je(this._getChildren().filter((e=>!We(e))),e.target,t,!0);n&&(n.focus({preventScroll:!0}),Ks.getOrCreateInstance(n).show())}_getChildren(){return Lt.find(Vs,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Me(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const s=Lt.findOne(e,n);s&&s.classList.toggle(i,t)};i(".dropdown-toggle",Bs),i(".dropdown-menu",Ws),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(Bs)}_getInnerElement(e){return e.matches(Vs)?e:Lt.findOne(Vs,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Ks.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(document,$s,zs,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),We(this)||Ks.getOrCreateInstance(this).show()})),pt.on(window,js,(()=>{for(const e of Lt.find(Us))Ks.getOrCreateInstance(e)})),Xe(Ks);const Qs=".bs.toast",Xs=`mouseover${Qs}`,Ys=`mouseout${Qs}`,Gs=`focusin${Qs}`,Js=`focusout${Qs}`,Zs=`hide${Qs}`,er=`hidden${Qs}`,tr=`show${Qs}`,nr=`shown${Qs}`,ir="hide",sr="show",rr="showing",or={animation:"boolean",autohide:"boolean",delay:"number"},ar={animation:!0,autohide:!0,delay:5e3};class lr extends Et{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return ar}static get DefaultType(){return or}static get NAME(){return"toast"}show(){pt.trigger(this._element,tr).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ir),Ve(this._element),this._element.classList.add(sr,rr),this._queueCallback((()=>{this._element.classList.remove(rr),pt.trigger(this._element,nr),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(pt.trigger(this._element,Zs).defaultPrevented||(this._element.classList.add(rr),this._queueCallback((()=>{this._element.classList.add(ir),this._element.classList.remove(rr,sr),pt.trigger(this._element,er)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(sr),super.dispose()}isShown(){return this._element.classList.contains(sr)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){pt.on(this._element,Xs,(e=>this._onInteraction(e,!0))),pt.on(this._element,Ys,(e=>this._onInteraction(e,!1))),pt.on(this._element,Gs,(e=>this._onInteraction(e,!0))),pt.on(this._element,Js,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=lr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}At(lr),Xe(lr)},783:(e,t,n)=>{"use strict";var i=n(618),s=Object.create(null),r="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(r)return console.log("no window.document found, will not HMR CSS"),a;var n,u,h=function(e){var t=s[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),r=n[n.length-1];r&&(t=r.src)}s[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),s=n&&n[1];return s&&e?e.split(",").map((function(e){var n=new RegExp("".concat(s,"\\.js$"),"g");return i(t.replace(n,"".concat(e.replace(/{fileName}/g,s),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=h(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return o.call(t,(function(t){if(t.href){var s=function(e,t){var n;return e=i(e,{stripWWW:!1}),t.some((function(i){e.indexOf(t)>-1&&(n=i)})),n}(t.href,e);d(s)&&!0!==t.visited&&s&&(l(t,s),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return n.apply(e,t)}),50)}}},618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),i=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+i+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{"use strict";var i=n(783)(e.id,{locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)}},l={};function c(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=l[e]={id:e,exports:{}};try{var i={id:e,module:n,factory:a[e],require:c};c.i.forEach((function(e){e(i)})),n=i.module,i.factory.call(n.exports,n,n.exports,i.require)}catch(e){throw n.error=e,e}return n.exports}c.m=a,c.c=l,c.i=[],c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>"main.css",c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"fbcd1fdac1dfb52799ef",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",c.l=(n,i,s,r)=>{if(e[n])e[n].push(i);else{var o,a;if(void 0!==s)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+s){o=u;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",t+s),o.src=n),e[n]=[i];var h=(t,i)=>{o.onerror=o.onload=null,clearTimeout(f);var s=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(i))),t)return t(i)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),a&&document.head.appendChild(o)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,i={},s=c.c,r=[],o=[],a="idle",l=0,d=[];function u(e){a=e;for(var t=[],n=0;n<o.length;n++)t[n]=o[n].call(null,e);return Promise.all(t)}function h(){0==--l&&u("ready").then((function(){if(0===l){var e=d;d=[];for(var t=0;t<e.length;t++)e[t]()}}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(c.hmrM).then((function(n){return n?u("prepare").then((function(){var i=[];return t=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,s){return c.hmrC[s](n.c,n.r,n.m,e,t,i),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return i}))},0===l?t():new Promise((function(e){d.push((function(){e(t())}))}));var t}))})):u(g()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},g();var i=t.map((function(t){return t(e)}));t=void 0;var s=i.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return u("abort").then((function(){throw s[0]}));var r=u("dispose");i.forEach((function(e){e.dispose&&e.dispose()}));var o,a=u("apply"),l=function(e){o||(o=e)},c=[];return i.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),Promise.all([r,a]).then((function(){return o?u("fail").then((function(){throw o})):n?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return c}))}))}function g(){if(n)return t||(t=[]),Object.keys(c.hmrI).forEach((function(e){n.forEach((function(n){c.hmrI[e](n,t)}))})),n=void 0,!0}c.hmrD=i,c.i.push((function(d){var m,g,_,v,b=d.module,y=function(t,n){var i=s[n];if(!i)return t;var o=function(o){if(i.hot.active){if(s[o]){var a=s[o].parents;-1===a.indexOf(n)&&a.push(n)}else r=[n],e=o;-1===i.children.indexOf(o)&&i.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),r=[];return t(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&"e"!==d&&Object.defineProperty(o,d,c(d));return o.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return l++,e.then(h,h),e;default:return e}}(t.e(e))},o}(d.require,d.id);b.hot=(m=d.id,g=b,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:_=e!==m,_requireSelf:function(){r=g.parents.slice(),e=_?void 0:m,c(m)},active:!0,accept:function(e,t,n){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var i=0;i<e.length;i++)v._acceptedDependencies[e[i]]=t||function(){},v._acceptedErrorHandlers[e[i]]=n;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:f,apply:p,status:function(e){if(!e)return a;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:i[m]},e=void 0,v),b.parents=r,b.children=[],r=[],d.require=y})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),n=(e,t,n,i)=>{var s=document.createElement("link");return s.rel="stylesheet",s.type="text/css",s.onerror=s.onload=r=>{if(s.onerror=s.onload=null,"load"===r.type)n();else{var o=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,s.parentNode.removeChild(s),i(l)}},s.href=t,document.head.appendChild(s),s},i=(e,t)=>{for(var n=document.getElementsByTagName("link"),i=0;i<n.length;i++){var s=(o=n[i]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===e||s===t))return o}var r=document.getElementsByTagName("style");for(i=0;i<r.length;i++){var o;if((s=(o=r[i]).getAttribute("data-href"))===e||s===t)return o}},s=[],r=[],o=e=>({dispose:()=>{for(var e=0;e<s.length;e++){var t=s[e];t.parentNode&&t.parentNode.removeChild(t)}s.length=0},apply:()=>{for(var e=0;e<r.length;e++)r[e].rel="stylesheet";r.length=0}}),c.hmrC.miniCss=(e,t,a,l,d,u)=>{d.push(o),e.forEach((e=>{var t=c.miniCssF(e),o=c.p+t,a=i(t,o);a&&l.push(new Promise(((t,i)=>{var l=n(e,o,(()=>{l.as="style",l.rel="preload",t()}),i);s.push(a),r.push(l)})))}))},(()=>{var e,t,n,i,s,r=c.hmrS_jsonp=c.hmrS_jsonp||{179:0},o={};function a(t,n){return e=n,new Promise(((e,n)=>{o[t]=e;var i=c.p+c.hu(t),s=new Error;c.l(i,(e=>{if(o[t]){o[t]=void 0;var i=e&&("load"===e.type?"missing":e.type),r=e&&e.target&&e.target.src;s.message="Loading hot update chunk "+t+" failed.\n("+i+": "+r+")",s.name="ChunkLoadError",s.type=i,s.request=r,n(s)}}))}))}function l(e){function o(e){for(var t=[e],n={},i=t.map((function(e){return{chain:[e],id:e}}));i.length>0;){var s=i.pop(),r=s.id,o=s.chain,l=c.c[r];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:r};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:r};for(var d=0;d<l.parents.length;d++){var u=l.parents[d],h=c.c[u];if(h){if(h.hot._declinedDependencies[r])return{type:"declined",chain:o.concat([u]),moduleId:r,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[r]?(n[u]||(n[u]=[]),a(n[u],[r])):(delete n[u],t.push(u),i.push({chain:o.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}c.f&&delete c.f.jsonpHmr,t=void 0;var l={},d=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(c.o(n,f)){var p,m=n[f],g=!1,_=!1,v=!1,b="";switch((p=m?o(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":e.onDeclined&&e.onDeclined(p),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+p.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(p),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(p),e.ignoreUnaccepted||(g=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(p),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(p),v=!0;break;default:throw new Error("Unexception type "+p.type)}if(g)return{error:g};if(_)for(f in u[f]=m,a(d,p.outdatedModules),p.outdatedDependencies)c.o(p.outdatedDependencies,f)&&(l[f]||(l[f]=[]),a(l[f],p.outdatedDependencies[f]));v&&(a(d,[p.moduleId]),u[f]=h)}n=void 0;for(var y,w=[],E=0;E<d.length;E++){var A=d[E],C=c.c[A];C&&(C.hot._selfAccepted||C.hot._main)&&u[A]!==h&&!C.hot._selfInvalidated&&w.push({module:A,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;i.forEach((function(e){delete r[e]})),i=void 0;for(var t,n=d.slice();n.length>0;){var s=n.pop(),o=c.c[s];if(o){var a={},u=o.hot._disposeHandlers;for(E=0;E<u.length;E++)u[E].call(null,a);for(c.hmrD[s]=a,o.hot.active=!1,delete c.c[s],delete l[s],E=0;E<o.children.length;E++){var h=c.c[o.children[E]];h&&(e=h.parents.indexOf(s))>=0&&h.parents.splice(e,1)}}}for(var f in l)if(c.o(l,f)&&(o=c.c[f]))for(y=l[f],E=0;E<y.length;E++)t=y[E],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var n in u)c.o(u,n)&&(c.m[n]=u[n]);for(var i=0;i<s.length;i++)s[i](c);for(var r in l)if(c.o(l,r)){var o=c.c[r];if(o){y=l[r];for(var a=[],h=[],f=[],p=0;p<y.length;p++){var m=y[p],g=o.hot._acceptedDependencies[m],_=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==a.indexOf(g))continue;a.push(g),h.push(_),f.push(m)}}for(var v=0;v<a.length;v++)try{a[v].call(null,y)}catch(n){if("function"==typeof h[v])try{h[v](n,{moduleId:r,dependencyId:f[v]})}catch(i){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:r,dependencyId:f[v],error:i,originalError:n}),e.ignoreErrored||(t(i),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:r,dependencyId:f[v],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<w.length;b++){var E=w[b],A=E.module;try{E.require(A)}catch(n){if("function"==typeof E.errorHandler)try{E.errorHandler(n,{moduleId:A,module:c.c[A]})}catch(i){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:A,error:i,originalError:n}),e.ignoreErrored||(t(i),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:A,error:n}),e.ignoreErrored||t(n)}}return d}}}self.webpackHotUpdateajs=(t,i,r)=>{for(var a in i)c.o(i,a)&&(n[a]=i[a],e&&e.push(a));r&&s.push(r),o[t]&&(o[t](),o[t]=void 0)},c.hmrI.jsonp=function(e,t){n||(n={},s=[],i=[],t.push(l)),c.o(n,e)||(n[e]=c.m[e])},c.hmrC.jsonp=function(e,o,d,u,h,f){h.push(l),t={},i=o,n=d.reduce((function(e,t){return e[t]=!1,e}),{}),s=[],e.forEach((function(e){c.o(r,e)&&void 0!==r[e]?(u.push(a(e,f)),t[e]=!0):t[e]=!1})),c.f&&(c.f.jsonpHmr=function(e,n){t&&c.o(t,e)&&!t[e]&&(n.push(a(e)),t[e]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),c(579)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,